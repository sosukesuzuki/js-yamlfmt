$schema: "https://moonrepo.dev/schemas/global-project.json"

# Extend and inherit an external configuration file. Must be a valid HTTPS URL or file system path.
# extends: './shared/project.yml'

# File groups are a mechanism for grouping similar types of files within a project
# using file glob patterns. These groups are then used by tasks to calculate functionality like
# cache computation, affected files since last change, command line arguments, deterministic
# builds, and more.
#
# This setting requires a map, where the key is the file group name, and the value is a list of
# globs. Globs are relative to a project, even though they are defined globally. This enables
# enforcement of organizational patterns across all projects in the workspace.
fileGroups:
  # List of configuration files located within the project root.
  configs:
    - "*.{js,json}"

  # List of non-test source files.
  sources:
    - "src/**/*"
    - "types/**/*"

  # List of non-source test files.
  tests:
    - "tests/**/*.test.*"
    - "**/__tests__/**/*"

  # All static assets within the project.
  # This may include styles, images, videos, etc.
  assets:
    - "assets/**/*"
    - "images/**/*"
    - "static/**/*"
    - "**/*.{scss,css}"
    - "**/*.mdx"

# A task is an action that is ran within the context of a project, and wraps
# around an npm or system command. Tasks that are defined here and inherited by all projects
# within the workspace, but can be overridden per project.
#
# This setting requires a map, where the key is a unique name for the task,
# and the value is an object of task parameters.
tasks:
  buildPackage:
    command:
      - "packemon"
      - "pack"
      # Add `engines` field to package
      - "--addEngines"
      # Add `exports` field to package
      - "--addExports"
      # Generate TypeScript declarations
      - "--declaration"
      - "--declarationConfig"
      - "tsconfig.build.json"
    inputs:
      # Source files only
      - "src/**/*"
      - "package.json"
      # A build specific tsconfig
      - "tsconfig.build.json"
      - "/tsconfig.options.json"
    outputs:
      # Matches `compilerOptions.outDir`
      - "dts"
    env:
      NODE_ENV: "production"

  typecheck:
    command:
      - "tsc"
      - "--build"
      - "--pretty"
      - "--verbose"
    inputs:
      - "src/**/*"
      - "tests/**/*"
      - "types/**/*"
      - "tsconfig.json"
      - "tsconfig.*.json"
      - "/tsconfig.options.json"

  lint:
    command:
      - "eslint"
      - "--ext"
      - ".js,.jsx,.ts,.tsx"
      - "--report-unused-disable-directives"
      - "--no-error-on-unmatched-pattern"
      - "--exit-on-fatal-error"
      - "--ignore-path"
      - "@in(4)"
      - "."
    inputs:
      - "src/**/*"
      - "tests/**/*"
      - "*.config.*"
      - "**/.eslintrc.*"
      - "/.eslintignore"
      - "/.eslintrc.*"
  format:
    command:
      - "prettier"
      - "--check"
      - "."
    inputs:
      - "src/**/*"
      - "tests/**/*"
